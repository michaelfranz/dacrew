name: java_gradle_crew
description: >
  A multi-agent CrewAI pipeline for java projects which use Gradle. 
  Generated code is high-quality. Unit and integration tests provide a 
  high degree of code coverage. Code generation is driven from specifications
  provided in Jira. Agents utilise knowledge provided from embeddings.
supported_languages: ["java", "kotlin"]
default_build_command: "./gradlew build"
default_test_command: "./gradlew test"
agents:
  - name: requirement_agent
    role: Requirement Interpreter
    goal: >
      Analyze the user requirement and create a structured specification 
      for a Java application, including pseudocode, file placement, 
      dependencies, and patterns.
    knowledge:
      codebase:
        enabled: true
        tags: []
      jira:
        enabled: true
      documents:
        enabled: true
        tags: []
    tools:
      - jira
    llm: gpt-4-turbo
    issue_routing:
      Story:
        Draft Requirement:
          name: task_analyze_requirement
          tags: ["architecture", "spec"]

  - name: code_agent
    role: Code Generator
    backstory: >
      You are an experienced Java developer with 10+ years of experience in enterprise applications.
      You excel at translating business requirements into clean, maintainable code that follows best practices.
      Your expertise includes:
      - Creating comprehensive unit and integration tests using JUnit 5, AssertJ and Mockito
      - Following established project patterns and conventions
      - Code build tools like gradle and maven and their configuration
      - Implementing proper error handling and logging
      - Writing clear, concise documentation
      You always:
      - Analyze existing codebase patterns before implementing new features
      - Consider performance, security, and maintainability implications
      - Create unit- and integration tests for the new and/or modified code
      - Validate your implementation against the original requirements
    goal: >
      Implement well-structured, tested Java code based on a specification.
      Generate code that implements the requirement, following codebase 
      conventions and referencing retrieved patterns.
    knowledge:
      codebase:
        enabled: true
        tags: []
      jira:
        enabled: true
      documents:
        enabled: false
        tags: []
    tools:
      - static_analysis
      - jira
    llm: gpt-4-turbo
    issue_routing:
      Feature:
        Accepted:
          name: task_generate_code
          tags: ["implement", "test"]

  - name: qa_agent
    role: QA & Refiner
    backstory: >
      You are an expert in software code quality. You identify software quality issues
      through static code analysis, best-practice checks, and test execution.
    goal: >
      Review code and tests, run static analysis and test executions 
      if possible, and iteratively refine code until it meets quality criteria.
    knowledge:
      codebase:
        enabled: true
        tags: []
      jira:
        enabled: true
      documents:
        enabled: false
        tags: []
    tools:
      - static_analysis
      - test_executor
      - jira
    llm: gpt-4-turbo
    issue_routing:
      Story:
        Ready for QA:
          name: task_refine_code
          tags: ["qa", "lint"]
        Testing in Progress:
          name: task_refine_tests
          tags: ["qa", "fix-failures"]

tools:
  - name: embedding_retriever
    description: >
      Retrieves semantically relevant code and documentation chunks from 
      FAISS/BM25 hybrid embeddings of the codebase.
    type: retrieval
    config:
      retriever: faiss
      reranker: bm25
      top_k: 10

  - name: static_analysis
    description: >
      Runs linters, formatters, and type-checkers (e.g., flake8, mypy, or Java equivalents).
    type: shell

  - name: test_executor
    description: >
      Runs the generated tests in a sandboxed environment (e.g., pytest, JUnit).
    type: shell

tasks:
  - name: task_analyze_requirement
    description: >
      Create a technical specification and pseudocode plan for the user request.
    input: user_requirement
    output: code_specification

  - name: task_generate_code
    description: >
      Generate code implementing the code_specification, 
      using retrieved examples for style and API references.
      Generate tests for the implementation.
    input: code_specification
    output: generated_code

  - name: task_refine_code
    description: >
      Analyze generated_code with static_analysis, make improvements 
      based on issues, and optionally re-query embeddings.
    input: generated_code
    output: refined_code

  - name: task_refine_tests
    description: >
      Analyze test_code, run test_executor, fix failing tests 
      or update test cases.
    input: test_code
    output: refined_tests


# .dacrew-example.yml
# Project-specific configuration for DaCrew.
# Copy this file to .dacrew.yml in your project root and update it with your values.
#
# Values here override or extend those in ~/.dacrew/config.yml for this project.
# DO NOT PLACE API KEYS IN THIS FILE

# =====================================================================
# Project Configuration
# =====================================================================
project: "bts"  # Unique identifier for this project (must match workspace name)

# =====================================================================
# Embedding Configuration
# =====================================================================
embedding:
  # ---------------------------------------------------------
  # Codebase Embedding
  # ---------------------------------------------------------
  codebase:
    path: "./"  # Path to the project source root
    include_patterns:
      - "src/**/*.java"
      - "src/**/*.py"
    exclude_patterns:
      - "node_modules/**"
      - "build/**"

  # ---------------------------------------------------------
  # Jira Issues Embedding
  # ---------------------------------------------------------
  issues:
    exclude_statuses: ["Cancelled", "Archived"]

  # ---------------------------------------------------------
  # Documents & Web Embedding
  # ---------------------------------------------------------
  documents:
    paths:
      - "docs/Python_CLI_Application.pdf"
      - "docs/Python_Tips.txt"
      - "docs/README.me"
    urls:
      - "https://realpython.com/python-click/"
      - "https://gist.github.com/ruimaranhao/4e18cbe3dad6f68040c32ed6709090a3"
      - "https://dev.to/devasservice/python-best-practices-writing-clean-efficient-and-maintainable-code-34bj"

# =====================================================================
# Generation (Build & Test Commands)
# =====================================================================
gen:
  # Build command relative to the workspace/current directory
  build: "./gradlew build"

  # Test command relative to the workspace/current directory
  test: "./gradlew test"

# =====================================================================
# Git Settings
# =====================================================================
git:
  # Default branch prefix for branches created by dacrew
  default_branch_prefix: "dacrew/"

  # Commit message template
  # Available placeholders: {ISSUE_ID}, {ISSUE_TITLE}
  commit_template: "Implementing {ISSUE_ID}: {ISSUE_TITLE}"

# =====================================================================
# Jira Configuration
# =====================================================================
jira:
  # URL to your Jira instance (e.g., https://yourcompany.atlassian.net)
  url: "https://karakun-agent.atlassian.net"

  # Jira project key (e.g., ABC)
  jira_project_key: "BTS"

  # Default user ID (often the username or email)
  user_id: "mike.mannion@karakun.com"

  # Maximum number of jira issues fetched for any query
  fetch_limit: 500

# =====================================================================
# AI and Embeddings
# =====================================================================
ai:
  # Model for code generation and other AI tasks
  model: "gpt-4"

  # Temperature controls randomness (0.0 = deterministic)
  temperature: 0.7

  # Embedding model for code and issues (HuggingFace or OpenAI)
  embeddings_model: "sentence-transformers/all-MiniLM-L6-v2"


crew:
  name: codegen_crew
  description: >
    A multi-agent CrewAI pipeline that generates high-quality code and unit tests 
    from a user-provided requirement, leveraging codebase embeddings for context.

  agents:
    - name: requirement_agent
      role: Requirement Interpreter
      goal: >
        Analyze the user requirement and create a structured specification 
        including pseudocode, file placement, dependencies, and patterns.
      knowledge:
        codebase:
          enabled: true
          tags: []
        jira:
          enabled: true
        documents:
          enabled: true
          tags: []
      tools:
        - jira
      llm: gpt-4-turbo
      tasks:
        - task_analyze_requirement
      jira_workflow:
        start: "Draft Requirement"
        in_progress: "Analyzing Requirement"
        done: "Ready for Development"
        failed: "Blocked"

    - name: code_agent
      role: Code Generator
      backstory: >
        You are an experienced Java developer with 10+ years of experience in enterprise applications.
        You excel at translating business requirements into clean, maintainable code that follows best practices.
        and create comprehensive tests.
        Your expertise includes:
        - Creating comprehensive unit and integration tests using JUnit 5, AssertJ and Mockito
        - Following established project patterns and conventions
        - Code build tools like gradle and maven and their configuration
        - Implementing proper error handling and logging
        - Writing clear, concise documentation
        You always:
        - Analyze existing codebase patterns before implementing new features
        - Write tests first when possible (TDD approach)
        - Consider performance, security, and maintainability implications
        - Validate your implementation against the original requirements
      goal: >
        Implement well-structured, tested Java code based on a specification.
        Generate code that implements the requirement, following codebase 
        conventions and referencing retrieved patterns.
      knowledge:
        codebase:
          enabled: true
          tags: []
        jira:
          enabled: true
        documents:
          enabled: false
          tags: []
      tools:
        - static_analysis
        - jira
      llm: gpt-4-turbo
      tasks:
        - task_generate_code
      jira_workflow:
        start: "Spec Ready"
        in_progress: "Coding in Progress"
        done: "Code Generated"
        failed: "Blocked"

    - name: test_agent
      role: Test Generator
      backstory: >
        You are an experienced Java developer with 10+ years of experience in enterprise application testing.
        You in writing comprehensive unit and integration tests using testing.
        Your expertise includes:
        - Creating comprehensive unit and integration tests using JUnit 5, AssertJ and Mockito
        - Following established project patterns and conventions
        - Code build tools like gradle and maven and their configuration
        - Implementing proper error handling and logging
        - Writing clear, concise documentation
        You always:
        - Analyze existing codebase patterns before implementing new features
      goal: >
        Produce unit and integration tests for the generated code, 
        based on codebase testing practices.
      knowledge:
        codebase:
          enabled: true
          tags: []
        jira:
          enabled: true
        documents:
          enabled: false
          tags: []
      tools:
        - jira
      llm: gpt-4-turbo
      tasks:
        - task_generate_tests
      jira_workflow:
        start: "Code Generated"
        in_progress: "Testing in Progress"
        done: "Ready for QA"
        failed: "Blocked"

    - name: qa_agent
      role: QA & Refiner
      backstory: >
        You are an expert in software code quality. You identify software quality use
        though the use of static code analysis tools, searches on best-practice code style and structure.
        Highlight, anti-patterns and code smells.
      goal: >
        Review code and tests, run static analysis and test executions 
        if possible, and iteratively refine code until it meets quality criteria.
      knowledge:
        codebase:
          enabled: true
          tags: []
        jira:
          enabled: true
        documents:
          enabled: false
          tags: []
      tools:
        - static_analysis
        - test_executor
        - jira
      llm: gpt-4-turbo
      tasks:
        - task_refine_code
        - task_refine_tests
      jira_workflow:
        start: "Ready for QA"
        in_progress: "Evaluating Quality"
        done: "Done"
        failed: "Blocked"

  tools:
    - name: embedding_retriever
      description: >
        Retrieves semantically relevant code and documentation chunks from 
        FAISS/BM25 hybrid embeddings of the codebase.
      type: retrieval
      config:
        retriever: faiss
        reranker: bm25
        top_k: 10

    - name: static_analysis
      description: >
        Runs linters, formatters, and type-checkers (e.g., flake8, mypy, or Java equivalents).
      type: shell

    - name: test_executor
      description: >
        Runs the generated tests in a sandboxed environment (e.g., pytest, JUnit).
      type: shell

  tasks:
    - name: task_analyze_requirement
      description: >
        Create a technical specification and pseudocode plan for the user request.
      input: user_requirement
      output: code_specification

    - name: task_generate_code
      description: >
        Generate code implementing the code_specification, 
        using retrieved examples for style and API references.
      input: code_specification
      output: generated_code

    - name: task_generate_tests
      description: >
        Generate unit and integration tests for the generated_code.
      input: generated_code
      output: test_code

    - name: task_refine_code
      description: >
        Analyze generated_code with static_analysis, make improvements 
        based on issues, and optionally re-query embeddings.
      input: generated_code
      output: refined_code

    - name: task_refine_tests
      description: >
        Analyze test_code, run test_executor, fix failing tests 
        or update test cases.
      input: test_code
      output: refined_tests
